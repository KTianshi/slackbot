import ErrorBoundary from '../ErrorBoundary';
import { ExplicitStatsigOptions, RetryBackoffFunc } from '../StatsigOptions';
export declare const STATSIG_API = "https://statsigapi.net/v1";
export declare const STATSIG_CDN = "https://api.statsigcdn.com/v1";
type RequestOptions = Partial<{
    retries: number;
    retryURL: string;
    backoff: number | RetryBackoffFunc;
    isRetrying: boolean;
    signal: AbortSignal;
    compress?: boolean;
    additionalHeaders?: Record<string, string>;
}>;
export default class StatsigFetcher {
    private apiForDownloadConfigSpecs;
    private apiForGetIdLists;
    private fallbackToStatsigAPI;
    private sessionID;
    private leakyBucket;
    private pendingTimers;
    private dispatcher;
    private localMode;
    private sdkKey;
    private errorBoundry;
    private networkOverrideFunc;
    constructor(secretKey: string, options: ExplicitStatsigOptions, errorBoundry: ErrorBoundary, sessionID: string);
    validateSDKKeyUsed(hashedSDKKeyUsed: string): boolean;
    downloadConfigSpecs(sinceTime: number): Promise<Response>;
    getIDLists(): Promise<Response>;
    dispatch(url: string, body: Record<string, unknown>, timeout: number): Promise<Response>;
    post(url: string, body: Record<string, unknown>, options?: RequestOptions): Promise<Response>;
    get(url: string, options?: RequestOptions): Promise<Response>;
    request(method: 'POST' | 'GET', url: string, body?: Record<string, unknown>, options?: RequestOptions): Promise<Response>;
    shutdown(): void;
    private _retry;
    private getDiagnosticFromURL;
}
export {};

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
var core_1 = require("./utils/core");
var LogEventValidator_1 = __importStar(require("./utils/LogEventValidator"));
var LogEvent = /** @class */ (function () {
    function LogEvent(eventName) {
        var _a;
        this.user = null;
        this.value = null;
        this.metadata = null;
        this.secondaryExposures = [];
        this.time = Date.now();
        this.eventName =
            (_a = LogEventValidator_1["default"].validateEventName(eventName)) !== null && _a !== void 0 ? _a : 'invalid_event';
    }
    LogEvent.prototype.setUser = function (user) {
        var validatedUser = LogEventValidator_1["default"].validateUserObject(user);
        if (validatedUser == null) {
            return;
        }
        this.user = (0, core_1.clone)(validatedUser);
        if (this.user != null) {
            this.user.privateAttributes = null;
        }
    };
    LogEvent.prototype.setValue = function (value) {
        var validatedValue = LogEventValidator_1["default"].validateEventValue(value);
        if (validatedValue == null) {
            return;
        }
        this.value = validatedValue;
    };
    LogEvent.prototype.setMetadata = function (metadata) {
        var validatedMetadata = LogEventValidator_1["default"].validateEventMetadata(metadata);
        if (validatedMetadata == null) {
            return;
        }
        this.metadata = (0, core_1.clone)(validatedMetadata);
    };
    LogEvent.prototype.setDiagnosticsMetadata = function (metadata) {
        var metadataSize = LogEventValidator_1["default"].approximateObjectSize(metadata);
        var optionSize = 0;
        var metadataCopy = (0, core_1.clone)(metadata);
        if (metadataSize > LogEventValidator_1.MAX_OBJ_SIZE) {
            if (metadata.statsigOptions) {
                optionSize = LogEventValidator_1["default"].approximateObjectSize(metadata.statsigOptions);
                metadataCopy.statsigOptions = 'dropped';
            }
            if (metadataSize - optionSize > LogEventValidator_1.MAX_OBJ_SIZE) {
                if (metadata.context === 'initialize') {
                    metadataCopy.markers = metadata.markers.filter(function (marker) { return marker.key === 'overall'; });
                }
                else {
                    metadataCopy.markers = 'dropped';
                }
            }
        }
        this.metadata = metadataCopy;
    };
    LogEvent.prototype.setTime = function (time) {
        var validatedTime = LogEventValidator_1["default"].validateEventTime(time);
        if (validatedTime == null) {
            return;
        }
        this.time = validatedTime;
    };
    LogEvent.prototype.setSecondaryExposures = function (exposures) {
        this.secondaryExposures = Array.isArray(exposures) ? exposures : [];
    };
    LogEvent.prototype.validate = function () {
        return typeof this.eventName === 'string' && this.eventName.length > 0;
    };
    LogEvent.prototype.toObject = function () {
        return {
            eventName: this.eventName,
            metadata: this.metadata,
            time: this.time,
            user: this.user,
            value: this.value,
            secondaryExposures: this.secondaryExposures
        };
    };
    return LogEvent;
}());
exports["default"] = LogEvent;

"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.OptionsLoggingCopy = exports.OptionsWithDefaults = void 0;
var StatsigFetcher_1 = require("./utils/StatsigFetcher");
var DEFAULT_RULESETS_SYNC_INTERVAL = 10 * 1000;
var MIN_RULESETS_SYNC_INTERVAL = 5 * 1000;
var DEFAULT_ID_LISTS_SYNC_INTERVAL = 60 * 1000;
var MIN_ID_LISTS_SYNC_INTERVAL = 30 * 1000;
var DEFAULT_LOGGING_INTERVAL = 60 * 1000;
var DEFAULT_MAX_LOGGING_BUFFER_SIZE = 1000;
var DEFAULT_LOG_DIAGNOSTICS = false;
var DEFAULT_POST_LOGS_RETRY_LIMIT = 5;
var DEFAULT_POST_LOGS_RETRY_BACKOFF = 1000;
function OptionsWithDefaults(opts) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    return {
        api: normalizeUrl((_a = getString(opts, 'api', StatsigFetcher_1.STATSIG_API)) !== null && _a !== void 0 ? _a : StatsigFetcher_1.STATSIG_API),
        apiForDownloadConfigSpecs: (_c = normalizeUrl(getString(opts, 'apiForDownloadConfigSpecs', (_b = opts.api) !== null && _b !== void 0 ? _b : null))) !== null && _c !== void 0 ? _c : StatsigFetcher_1.STATSIG_CDN,
        apiForGetIdLists: (_e = normalizeUrl(getString(opts, 'apiForGetIdLists', (_d = opts.api) !== null && _d !== void 0 ? _d : null))) !== null && _e !== void 0 ? _e : StatsigFetcher_1.STATSIG_API,
        fallbackToStatsigAPI: getBoolean(opts, 'fallbackToStatsigAPI', false),
        networkOverrideFunc: (_f = opts.networkOverrideFunc) !== null && _f !== void 0 ? _f : null,
        bootstrapValues: getString(opts, 'bootstrapValues', null),
        environment: opts.environment
            ? getObject(opts, 'environment', {})
            : null,
        rulesUpdatedCallback: opts.rulesUpdatedCallback
            ? getFunction(opts, 'rulesUpdatedCallback')
            : null,
        localMode: getBoolean(opts, 'localMode', false),
        initTimeoutMs: getNumber(opts, 'initTimeoutMs', 0),
        logger: (_g = opts.logger) !== null && _g !== void 0 ? _g : __assign(__assign({}, console), { logLevel: 'warn' }),
        dataAdapter: (_h = opts.dataAdapter) !== null && _h !== void 0 ? _h : null,
        rulesetsSyncIntervalMs: Math.max(getNumber(opts, 'rulesetsSyncIntervalMs', DEFAULT_RULESETS_SYNC_INTERVAL), MIN_RULESETS_SYNC_INTERVAL),
        idListsSyncIntervalMs: Math.max(getNumber(opts, 'idListsSyncIntervalMs', DEFAULT_ID_LISTS_SYNC_INTERVAL), MIN_ID_LISTS_SYNC_INTERVAL),
        loggingIntervalMs: getNumber(opts, 'loggingIntervalMs', DEFAULT_LOGGING_INTERVAL),
        loggingMaxBufferSize: Math.min(getNumber(opts, 'loggingMaxBufferSize', DEFAULT_MAX_LOGGING_BUFFER_SIZE), DEFAULT_MAX_LOGGING_BUFFER_SIZE),
        disableDiagnostics: getBoolean(opts, 'disableDiagnostics', DEFAULT_LOG_DIAGNOSTICS),
        initStrategyForIP3Country: (_j = getString(opts, 'initStrategyForIP3Country', 'await')) !== null && _j !== void 0 ? _j : 'await',
        initStrategyForIDLists: (_k = getString(opts, 'initStrategyForIDLists', 'await')) !== null && _k !== void 0 ? _k : 'await',
        postLogsRetryLimit: getNumber(opts, 'postLogsRetryLimit', DEFAULT_POST_LOGS_RETRY_LIMIT),
        postLogsRetryBackoff: (_l = opts.postLogsRetryBackoff) !== null && _l !== void 0 ? _l : DEFAULT_POST_LOGS_RETRY_BACKOFF,
        disableRulesetsSync: (_m = opts.disableRulesetsSync) !== null && _m !== void 0 ? _m : false,
        disableIdListsSync: (_o = opts.disableIdListsSync) !== null && _o !== void 0 ? _o : false,
        disableAllLogging: (_p = opts.disableAllLogging) !== null && _p !== void 0 ? _p : false,
        userPersistentStorage: (_q = opts.userPersistentStorage) !== null && _q !== void 0 ? _q : null,
        evaluationCallback: (_r = opts.evaluationCallback) !== null && _r !== void 0 ? _r : undefined,
        evaluationCallbacks: (_s = opts.evaluationCallbacks) !== null && _s !== void 0 ? _s : {}
    };
}
exports.OptionsWithDefaults = OptionsWithDefaults;
function OptionsLoggingCopy(options) {
    var loggingCopy = {};
    Object.entries(options).forEach(function (_a) {
        var option = _a[0], value = _a[1];
        var valueType = typeof value;
        switch (valueType) {
            case 'number':
            case 'bigint':
            case 'boolean':
                loggingCopy[String(option)] = value;
                break;
            case 'string':
                if (value.length < 50) {
                    loggingCopy[String(option)] = value;
                }
                else {
                    loggingCopy[String(option)] = 'set';
                }
                break;
            case 'object':
                if (option === 'environment') {
                    loggingCopy['environment'] = value;
                }
                else {
                    loggingCopy[String(option)] = value != null ? 'set' : 'unset';
                }
                break;
            case 'function':
                if (option === 'dataAdapter') {
                    loggingCopy[String(option)] = 'set';
                }
                break;
            default:
            // Ignore other fields
        }
    });
    return loggingCopy;
}
exports.OptionsLoggingCopy = OptionsLoggingCopy;
function getBoolean(inputOptions, index, defaultValue) {
    var b = inputOptions[index];
    if (b == null || typeof b !== 'boolean') {
        return defaultValue;
    }
    return b;
}
function getString(inputOptions, index, defaultValue) {
    var str = inputOptions[index];
    if (str == null || typeof str !== 'string') {
        return defaultValue;
    }
    return str;
}
function getObject(inputOptions, index, defaultValue) {
    var obj = inputOptions[index];
    if (obj == null || typeof obj !== 'object') {
        return defaultValue;
    }
    return obj;
}
function getFunction(inputOptions, index) {
    var func = inputOptions[index];
    if (func == null || typeof func !== 'function') {
        return null;
    }
    return func;
}
function getNumber(inputOptions, index, defaultValue) {
    var obj = inputOptions[index];
    if (obj == null || typeof obj !== 'number') {
        return defaultValue;
    }
    return obj;
}
function normalizeUrl(url) {
    return url && url.endsWith('/') ? url.slice(0, -1) : url;
}

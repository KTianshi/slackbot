"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
exports.__esModule = true;
exports.GlobalContext = exports.InitializeContext = exports.EvaluationContext = exports.StatsigContext = void 0;
var StatsigContext = /** @class */ (function () {
    function StatsigContext(ctx) {
        this.ctx = ctx;
        this.startTime = Date.now();
        this.caller = ctx.caller;
        this.eventCount = ctx.eventCount;
        this.configName = ctx.configName;
        this.clientKey = ctx.clientKey;
        this.hash = ctx.clientKey;
        this.bypassDedupe = ctx.bypassDedupe;
        this.userPersistedValues = ctx.userPersistedValues;
        this.persistentAssignmentOptions = ctx.persistentAssignmentOptions;
    }
    // Create a new context to avoid modifying context up the stack
    StatsigContext["new"] = function (ctx) {
        return new this(ctx);
    };
    StatsigContext.prototype.getContextForLogging = function () {
        return {
            tag: this.caller,
            eventCount: this.eventCount,
            configName: this.configName,
            clientKey: this.clientKey,
            hash: this.clientKey
        };
    };
    StatsigContext.prototype.getRequestContext = function () {
        return this.ctx;
    };
    return StatsigContext;
}());
exports.StatsigContext = StatsigContext;
var EvaluationContext = /** @class */ (function (_super) {
    __extends(EvaluationContext, _super);
    function EvaluationContext(ctx, user, spec, targetAppID, onlyEvaluateTargeting) {
        var _this = _super.call(this, ctx) || this;
        _this.user = user;
        _this.spec = spec;
        _this.targetAppID = targetAppID;
        _this.onlyEvaluateTargeting = onlyEvaluateTargeting;
        return _this;
    }
    EvaluationContext["new"] = function (ctx) {
        var user = ctx.user, spec = ctx.spec, optionalCtx = __rest(ctx, ["user", "spec"]);
        return new this(optionalCtx, user, spec);
    };
    EvaluationContext.get = function (ctx, evalCtx) {
        return new EvaluationContext(ctx, evalCtx.user, evalCtx.spec, evalCtx.targetAppID, evalCtx.onlyEvaluateTargeting);
    };
    return EvaluationContext;
}(StatsigContext));
exports.EvaluationContext = EvaluationContext;
var InitializeContext = /** @class */ (function (_super) {
    __extends(InitializeContext, _super);
    function InitializeContext(ctx, sdkKey) {
        var _this = _super.call(this, ctx) || this;
        _this.sdkKey = sdkKey;
        _this.success = true;
        return _this;
    }
    InitializeContext["new"] = function (ctx) {
        return new this(ctx, ctx.sdkKey);
    };
    InitializeContext.prototype.setSuccess = function (source) {
        this.success = true;
        this.source = source;
    };
    InitializeContext.prototype.setFailed = function (error) {
        this.success = false;
        this.error = error;
    };
    InitializeContext.prototype.getInitDetails = function () {
        return {
            duration: Date.now() - this.startTime,
            success: this.success,
            error: this.error,
            source: this.source
        };
    };
    return InitializeContext;
}(StatsigContext));
exports.InitializeContext = InitializeContext;
var GlobalContext = /** @class */ (function () {
    function GlobalContext() {
    }
    // @ts-ignore
    GlobalContext.isEdgeEnvironment = typeof EdgeRuntime === 'string';
    return GlobalContext;
}());
exports.GlobalContext = GlobalContext;

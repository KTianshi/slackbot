"use strict";
exports.__esModule = true;
var EvaluationDetails_1 = require("./EvaluationDetails");
var ConfigEvaluation = /** @class */ (function () {
    function ConfigEvaluation(value, rule_id, group_name, id_type, secondary_exposures, json_value, explicit_parameters, config_delegate, configVersion, unsupported) {
        if (rule_id === void 0) { rule_id = ''; }
        if (group_name === void 0) { group_name = null; }
        if (id_type === void 0) { id_type = null; }
        if (secondary_exposures === void 0) { secondary_exposures = []; }
        if (json_value === void 0) { json_value = {}; }
        if (explicit_parameters === void 0) { explicit_parameters = null; }
        if (config_delegate === void 0) { config_delegate = null; }
        if (unsupported === void 0) { unsupported = false; }
        this.value = value;
        this.rule_id = rule_id;
        if (typeof json_value === 'boolean') {
            // handle legacy gate case
            this.json_value = {};
        }
        else {
            this.json_value = json_value;
        }
        this.secondary_exposures = secondary_exposures;
        this.undelegated_secondary_exposures = secondary_exposures;
        this.config_delegate = config_delegate;
        this.unsupported = unsupported;
        this.explicit_parameters = explicit_parameters;
        this.is_experiment_group = false;
        this.group_name = group_name;
        this.id_type = id_type;
        this.configVersion = configVersion;
    }
    ConfigEvaluation.prototype.withEvaluationDetails = function (evaulationDetails) {
        this.evaluation_details = evaulationDetails;
        return this;
    };
    ConfigEvaluation.prototype.setIsExperimentGroup = function (isExperimentGroup) {
        if (isExperimentGroup === void 0) { isExperimentGroup = false; }
        this.is_experiment_group = isExperimentGroup;
    };
    ConfigEvaluation.unsupported = function (configSyncTime, initialUpdateTime, version) {
        return new ConfigEvaluation(false, '', null, null, [], {}, undefined, undefined, version, true).withEvaluationDetails(EvaluationDetails_1.EvaluationDetails.unsupported(configSyncTime, initialUpdateTime));
    };
    ConfigEvaluation.prototype.toStickyValues = function () {
        var _a, _b;
        return {
            value: this.value,
            json_value: this.json_value,
            rule_id: this.rule_id,
            group_name: this.group_name,
            secondary_exposures: this.secondary_exposures,
            undelegated_secondary_exposures: this.undelegated_secondary_exposures,
            config_delegate: this.config_delegate,
            explicit_parameters: this.explicit_parameters,
            time: (_b = (_a = this.evaluation_details) === null || _a === void 0 ? void 0 : _a.configSyncTime) !== null && _b !== void 0 ? _b : Date.now(),
            configVersion: this.configVersion
        };
    };
    ConfigEvaluation.fromStickyValues = function (stickyValues, initialUpdateTime) {
        var evaluation = new ConfigEvaluation(stickyValues.value, stickyValues.rule_id, stickyValues.group_name, null, stickyValues.secondary_exposures, stickyValues.json_value, stickyValues.explicit_parameters, stickyValues.config_delegate, stickyValues.configVersion);
        evaluation.evaluation_details = EvaluationDetails_1.EvaluationDetails.persisted(stickyValues.time, initialUpdateTime);
        evaluation.undelegated_secondary_exposures =
            stickyValues.undelegated_secondary_exposures;
        evaluation.is_experiment_group = true;
        return evaluation;
    };
    return ConfigEvaluation;
}());
exports["default"] = ConfigEvaluation;

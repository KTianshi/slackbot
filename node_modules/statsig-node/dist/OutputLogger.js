"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
var _logger = __assign(__assign({}, console), { logLevel: 'warn' });
var _sdkKey = null;
var OutputLogger = /** @class */ (function () {
    function OutputLogger() {
    }
    OutputLogger.getLogger = function () {
        return _logger;
    };
    OutputLogger.debug = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (_logger.logLevel === 'debug') {
            var sanitizedMessage = this.sanitizeError(message);
            _logger.debug && _logger.debug.apply(_logger, __spreadArray([sanitizedMessage], optionalParams, false));
        }
    };
    OutputLogger.info = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (_logger.logLevel === 'debug' || _logger.logLevel === 'info') {
            var sanitizedMessage = this.sanitizeError(message);
            _logger.info && _logger.info.apply(_logger, __spreadArray([sanitizedMessage], optionalParams, false));
        }
    };
    OutputLogger.warn = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (_logger.logLevel === 'debug' ||
            _logger.logLevel === 'info' ||
            _logger.logLevel === 'warn') {
            var sanitizedMessage = this.sanitizeError(message);
            _logger.warn.apply(_logger, __spreadArray([sanitizedMessage], optionalParams, false));
        }
    };
    OutputLogger.error = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (_logger.logLevel === 'debug' ||
            _logger.logLevel === 'info' ||
            _logger.logLevel === 'warn' ||
            _logger.logLevel === 'error') {
            var sanitizedMessage = this.sanitizeError(message);
            _logger.error.apply(_logger, __spreadArray([sanitizedMessage], optionalParams, false));
        }
    };
    OutputLogger.setLogger = function (logger, sdkKey) {
        _logger = logger;
        _sdkKey = sdkKey;
    };
    OutputLogger.resetLogger = function () {
        _logger = __assign(__assign({}, console), { logLevel: 'warn' });
    };
    OutputLogger.sanitizeError = function (message) {
        if (_sdkKey === null) {
            return message;
        }
        try {
            if (typeof message === 'string') {
                return message.replace(new RegExp(_sdkKey, 'g'), '******');
            }
            else if (message instanceof Error) {
                return message.toString().replace(new RegExp(_sdkKey, 'g'), '******');
            }
        }
        catch (_e) {
            // ignore
        }
        return message;
    };
    return OutputLogger;
}());
exports["default"] = OutputLogger;

"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.STATSIG_CDN = exports.STATSIG_API = void 0;
var Diagnostics_1 = __importDefault(require("../Diagnostics"));
var Errors_1 = require("../Errors");
var core_1 = require("./core");
var Dispatcher_1 = __importDefault(require("./Dispatcher"));
var getEncodedBody_1 = require("./getEncodedBody");
var Hashing_1 = require("./Hashing");
var safeFetch_1 = __importDefault(require("./safeFetch"));
var StatsigContext_1 = require("./StatsigContext");
var retryStatusCodes = [408, 500, 502, 503, 504, 522, 524, 599];
exports.STATSIG_API = 'https://statsigapi.net/v1';
exports.STATSIG_CDN = 'https://api.statsigcdn.com/v1';
var StatsigFetcher = /** @class */ (function () {
    function StatsigFetcher(secretKey, options, errorBoundry, sessionID) {
        this.apiForDownloadConfigSpecs = options.apiForDownloadConfigSpecs;
        this.apiForGetIdLists = options.apiForGetIdLists;
        this.fallbackToStatsigAPI = options.fallbackToStatsigAPI;
        this.sessionID = sessionID;
        this.leakyBucket = {};
        this.pendingTimers = [];
        this.dispatcher = new Dispatcher_1["default"](200);
        this.localMode = options.localMode;
        this.sdkKey = secretKey;
        this.errorBoundry = errorBoundry;
        this.networkOverrideFunc = options.networkOverrideFunc;
    }
    StatsigFetcher.prototype.validateSDKKeyUsed = function (hashedSDKKeyUsed) {
        var matched = hashedSDKKeyUsed === (0, Hashing_1.djb2Hash)(this.sdkKey);
        if (!matched) {
            this.errorBoundry.logError(new Errors_1.StatsigSDKKeyMismatchError(), StatsigContext_1.StatsigContext["new"]({ caller: 'validateSDKKeyUsed' }));
        }
        return matched;
    };
    StatsigFetcher.prototype.downloadConfigSpecs = function (sinceTime) {
        return __awaiter(this, void 0, void 0, function () {
            var path, url, options;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/download_config_specs' +
                            "/".concat(this.sdkKey, ".json") +
                            "?sinceTime=".concat(sinceTime);
                        url = this.apiForDownloadConfigSpecs + path;
                        if (this.fallbackToStatsigAPI) {
                            options = { retries: 1, retryURL: exports.STATSIG_CDN + path };
                        }
                        return [4 /*yield*/, this.get(url, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    StatsigFetcher.prototype.getIDLists = function () {
        return __awaiter(this, void 0, void 0, function () {
            var path, url, options;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/get_id_lists';
                        url = this.apiForGetIdLists + path;
                        if (this.fallbackToStatsigAPI) {
                            options = { retries: 1, retryURL: exports.STATSIG_API + path };
                        }
                        return [4 /*yield*/, this.post(url, {}, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    StatsigFetcher.prototype.dispatch = function (url, body, timeout) {
        return this.dispatcher.enqueue(this.post(url, body), timeout);
    };
    StatsigFetcher.prototype.post = function (url, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.request('POST', url, body, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    StatsigFetcher.prototype.get = function (url, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.request('GET', url, undefined, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    StatsigFetcher.prototype.request = function (method, url, body, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c, retryURL, _d, retries, _e, backoff, _f, isRetrying, signal, _g, compress, markDiagnostic, counter, applyBackoffMultiplier, backoffAdjusted, headers, _h, contents, contentEncoding, res, error, fetcher;
            var _this = this;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        _b = options !== null && options !== void 0 ? options : {}, _c = _b.retryURL, retryURL = _c === void 0 ? url : _c, _d = _b.retries, retries = _d === void 0 ? 0 : _d, _e = _b.backoff, backoff = _e === void 0 ? 1000 : _e, _f = _b.isRetrying, isRetrying = _f === void 0 ? false : _f, signal = _b.signal, _g = _b.compress, compress = _g === void 0 ? false : _g;
                        markDiagnostic = this.getDiagnosticFromURL(url);
                        if (this.localMode) {
                            return [2 /*return*/, Promise.reject(new Errors_1.StatsigLocalModeNetworkError())];
                        }
                        counter = this.leakyBucket[url];
                        if (counter != null && counter >= 1000) {
                            return [2 /*return*/, Promise.reject(new Errors_1.StatsigTooManyRequestsError("Request to ".concat(url, " failed because you are making the same request too frequently (").concat(counter, ").")))];
                        }
                        if (counter == null) {
                            this.leakyBucket[url] = 1;
                        }
                        else {
                            this.leakyBucket[url] = counter + 1;
                        }
                        applyBackoffMultiplier = function (backoff) {
                            return isRetrying ? backoff * 10 : backoff;
                        };
                        backoffAdjusted = typeof backoff === 'number'
                            ? applyBackoffMultiplier(backoff)
                            : backoff(retries);
                        headers = __assign(__assign({}, options === null || options === void 0 ? void 0 : options.additionalHeaders), { 'Content-type': 'application/json; charset=UTF-8', 'STATSIG-API-KEY': this.sdkKey, 'STATSIG-CLIENT-TIME': "".concat(Date.now()), 'STATSIG-SERVER-SESSION-ID': this.sessionID, 'STATSIG-SDK-TYPE': (0, core_1.getSDKType)(), 'STATSIG-SDK-VERSION': (0, core_1.getSDKVersion)() });
                        return [4 /*yield*/, (0, getEncodedBody_1.getEncodedBody)(body, compress ? 'gzip' : 'none', this.errorBoundry)];
                    case 1:
                        _h = _j.sent(), contents = _h.contents, contentEncoding = _h.contentEncoding;
                        if (contentEncoding) {
                            headers['Content-Encoding'] = contentEncoding;
                        }
                        if (!isRetrying) {
                            markDiagnostic === null || markDiagnostic === void 0 ? void 0 : markDiagnostic.start({});
                        }
                        fetcher = (_a = this.networkOverrideFunc) !== null && _a !== void 0 ? _a : safeFetch_1["default"];
                        return [2 /*return*/, fetcher(url, {
                                method: method,
                                body: contents,
                                headers: headers,
                                signal: signal
                            })
                                .then(function (localRes) {
                                res = localRes;
                                if ((!res.ok || retryStatusCodes.includes(res.status)) && retries > 0) {
                                    return _this._retry(method, retryURL, body, retries - 1, backoffAdjusted);
                                }
                                else if (!res.ok) {
                                    return Promise.reject(new Error('Request to ' + url + ' failed with status ' + res.status));
                                }
                                return Promise.resolve(res);
                            })["catch"](function (e) {
                                error = e;
                                if (retries > 0) {
                                    return _this._retry(method, url, body, retries - 1, backoffAdjusted);
                                }
                                return Promise.reject(error);
                            })["finally"](function () {
                                var _a;
                                markDiagnostic === null || markDiagnostic === void 0 ? void 0 : markDiagnostic.end({
                                    statusCode: res === null || res === void 0 ? void 0 : res.status,
                                    success: (res === null || res === void 0 ? void 0 : res.ok) === true,
                                    sdkRegion: (_a = res === null || res === void 0 ? void 0 : res.headers) === null || _a === void 0 ? void 0 : _a.get('x-statsig-region'),
                                    error: Diagnostics_1["default"].formatNetworkError(error)
                                });
                                _this.leakyBucket[url] = Math.max(_this.leakyBucket[url] - 1, 0);
                            })];
                }
            });
        });
    };
    StatsigFetcher.prototype.shutdown = function () {
        if (this.pendingTimers != null) {
            this.pendingTimers.forEach(function (timer) {
                if (timer != null) {
                    clearTimeout(timer);
                }
            });
        }
        if (this.dispatcher != null) {
            this.dispatcher.shutdown();
        }
    };
    StatsigFetcher.prototype._retry = function (method, url, body, retries, backoff) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var timer = setTimeout(function () {
                _this.leakyBucket[url] = Math.max(_this.leakyBucket[url] - 1, 0);
                _this.request(method, url, body, { retries: retries, backoff: backoff, isRetrying: true })
                    .then(resolve)["catch"](reject);
            }, backoff);
            if (timer.unref) {
                timer.unref();
            }
            _this.pendingTimers.push(timer);
        });
    };
    StatsigFetcher.prototype.getDiagnosticFromURL = function (url) {
        if (url.includes('/download_config_specs')) {
            return Diagnostics_1["default"].mark.downloadConfigSpecs.networkRequest;
        }
        if (url.includes('/get_id_lists')) {
            return Diagnostics_1["default"].mark.getIDListSources.networkRequest;
        }
        return null;
    };
    return StatsigFetcher;
}());
exports["default"] = StatsigFetcher;

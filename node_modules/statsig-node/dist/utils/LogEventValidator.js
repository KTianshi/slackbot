"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.MAX_OBJ_SIZE = void 0;
var OutputLogger_1 = __importDefault(require("../OutputLogger"));
var MAX_VALUE_SIZE = 128;
exports.MAX_OBJ_SIZE = 4096;
var MAX_USER_SIZE = 4096;
var LogEventValidator = /** @class */ (function () {
    function LogEventValidator() {
    }
    LogEventValidator.validateEventName = function (eventName) {
        if (eventName == null ||
            eventName.length === 0 ||
            typeof eventName !== 'string') {
            OutputLogger_1["default"].error('statsigSDK> EventName needs to be a string of non-zero length.');
            return null;
        }
        if (this.shouldTrimParam(eventName, MAX_VALUE_SIZE)) {
            OutputLogger_1["default"].warn("statsigSDK> Event name is too large (max ".concat(MAX_VALUE_SIZE, "). It may be trimmed."));
        }
        return eventName;
    };
    LogEventValidator.validateUserObject = function (user) {
        if (user == null) {
            OutputLogger_1["default"].warn('statsigSDK> User cannot be null.');
            return null;
        }
        if (user != null && typeof user !== 'object') {
            OutputLogger_1["default"].warn('statsigSDK> User is not set because it needs to be an object.');
            return null;
        }
        if (user.userID != null &&
            this.shouldTrimParam(user.userID, MAX_VALUE_SIZE)) {
            OutputLogger_1["default"].warn("statsigSDK> User ID is too large (max ".concat(MAX_VALUE_SIZE, "). It may be trimmed."));
        }
        if (this.shouldTrimParam(user, MAX_USER_SIZE)) {
            OutputLogger_1["default"].warn("statsigSDK> User object is too large (max ".concat(MAX_USER_SIZE, "). Some attributes may be stripped."));
        }
        return user;
    };
    LogEventValidator.validateEventValue = function (value) {
        if (value == null) {
            return null;
        }
        if (typeof value === 'string' &&
            this.shouldTrimParam(value, MAX_VALUE_SIZE)) {
            OutputLogger_1["default"].warn("statsigSDK> Event value is too large (max ".concat(MAX_VALUE_SIZE, "). It may be trimmed."));
        }
        if (typeof value === 'object') {
            return JSON.stringify(value);
        }
        else if (typeof value === 'number') {
            return value;
        }
        else {
            return value.toString();
        }
    };
    LogEventValidator.validateEventMetadata = function (metadata) {
        if (metadata != null && typeof metadata !== 'object') {
            OutputLogger_1["default"].warn('statsigSDK> Metadata is not set because it needs to be an object.');
            return null;
        }
        if (this.shouldTrimParam(metadata, exports.MAX_OBJ_SIZE)) {
            OutputLogger_1["default"].warn("statsigSDK> Event metadata is too large (max ".concat(exports.MAX_OBJ_SIZE, "). Some attributes may be stripped."));
        }
        return metadata;
    };
    LogEventValidator.validateEventTime = function (time) {
        if (time != null && typeof time !== 'number') {
            OutputLogger_1["default"].warn('statsigSDK> Timestamp is not set because it needs to be a number.');
            return null;
        }
        return time;
    };
    LogEventValidator.shouldTrimParam = function (param, size) {
        if (param == null)
            return false;
        if (typeof param === 'string')
            return param.length > size;
        if (typeof param === 'object') {
            return this.approximateObjectSize(param) > size;
        }
        if (typeof param === 'number')
            return param.toString().length > size;
        return false;
    };
    LogEventValidator.approximateObjectSize = function (x) {
        var size = 0;
        var entries = Object.entries(x);
        for (var i = 0; i < entries.length; i++) {
            var key = entries[i][0];
            var value = entries[i][1];
            if (typeof value === 'object' && value !== null) {
                size += this.approximateObjectSize(value);
            }
            else {
                size += String(value).length;
            }
            size += key.length;
        }
        return size;
    };
    return LogEventValidator;
}());
exports["default"] = LogEventValidator;

"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.DiagnosticsImpl = exports.MAX_MARKER_COUNT = exports.MAX_SAMPLING_RATE = void 0;
var core_1 = require("./utils/core");
exports.MAX_SAMPLING_RATE = 10000;
exports.MAX_MARKER_COUNT = 26;
var DiagnosticsImpl = /** @class */ (function () {
    function DiagnosticsImpl(args) {
        var _this = this;
        var _a, _b, _c;
        this.mark = {
            overall: this.selectAction('overall'),
            downloadConfigSpecs: this.selectStep('download_config_specs'),
            bootstrap: this.selectStep('bootstrap'),
            getIDList: this.selectStep('get_id_list'),
            getIDListSources: this.selectStep('get_id_list_sources'),
            getClientInitializeResponse: this.selectAction('get_client_initialize_response', 'process'),
            api_call: function (tag) {
                switch (tag) {
                    case 'getConfig':
                        return _this.selectAction('get_config');
                    case 'getExperiment':
                        return _this.selectAction('get_experiment');
                    case 'checkGate':
                        return _this.selectAction('check_gate');
                    case 'getLayer':
                        return _this.selectAction('get_layer');
                }
                return null;
            }
        };
        this.markers = {
            initialize: [],
            config_sync: [],
            event_logging: [],
            api_call: [],
            get_client_initialize_response: []
        };
        this.context = 'initialize';
        this.samplingRates = {
            dcs: 0,
            log: 0,
            idlist: 0,
            initialize: exports.MAX_SAMPLING_RATE,
            api_call: 0,
            gcir: 0
        };
        this.markers = (_a = args.markers) !== null && _a !== void 0 ? _a : {
            initialize: [],
            config_sync: [],
            event_logging: [],
            api_call: [],
            get_client_initialize_response: []
        };
        this.logger = args.logger;
        this.disabledCoreAPI = (_c = (_b = args.options) === null || _b === void 0 ? void 0 : _b.disableDiagnostics) !== null && _c !== void 0 ? _c : false;
    }
    DiagnosticsImpl.prototype.setContext = function (context) {
        this.context = context;
    };
    DiagnosticsImpl.prototype.setSamplingRate = function (samplingRate) {
        this.updateSamplingRates(samplingRate);
    };
    DiagnosticsImpl.prototype.selectAction = function (key, step) {
        var _this = this;
        return {
            start: function (data, context) {
                _this.addMarker(__assign({ key: key, step: step, action: 'start', timestamp: Date.now() }, (data !== null && data !== void 0 ? data : {})), context);
            },
            end: function (data, context) {
                _this.addMarker(__assign({ key: key, step: step, action: 'end', timestamp: Date.now() }, (data !== null && data !== void 0 ? data : {})), context);
            }
        };
    };
    DiagnosticsImpl.prototype.selectStep = function (key) {
        return {
            process: this.selectAction(key, 'process'),
            networkRequest: this.selectAction(key, 'network_request')
        };
    };
    DiagnosticsImpl.prototype.addMarker = function (marker, overrideContext) {
        var context = overrideContext !== null && overrideContext !== void 0 ? overrideContext : this.context;
        if (this.disabledCoreAPI && context == 'api_call') {
            return;
        }
        if (this.getMarkerCount(context) >= exports.MAX_MARKER_COUNT) {
            return;
        }
        this.markers[context].push(marker);
    };
    DiagnosticsImpl.prototype.getMarker = function (context) {
        return this.markers[context];
    };
    DiagnosticsImpl.prototype.clearMarker = function (context) {
        this.markers[context] = [];
    };
    DiagnosticsImpl.prototype.getMarkerCount = function (context) {
        return this.markers[context].length;
    };
    DiagnosticsImpl.prototype.logDiagnostics = function (context, optionalArgs) {
        if (this.disabledCoreAPI && context == 'api_call') {
            return;
        }
        var shouldLog = !optionalArgs
            ? true
            : this.getShouldLogDiagnostics(optionalArgs.type);
        if (shouldLog) {
            this.logger.logDiagnosticsEvent({
                context: context,
                markers: this.markers[context]
            });
        }
        this.markers[context] = [];
    };
    DiagnosticsImpl.prototype.updateSamplingRates = function (obj) {
        if (!obj || typeof obj !== 'object') {
            return;
        }
        this.safeSet(this.samplingRates, 'dcs', obj['dcs']);
        this.safeSet(this.samplingRates, 'idlist', obj['idlist']);
        this.safeSet(this.samplingRates, 'initialize', obj['initialize']);
        this.safeSet(this.samplingRates, 'log', obj['log']);
        this.safeSet(this.samplingRates, 'api_call', obj['api_call']);
        this.safeSet(this.samplingRates, 'gcir', obj['gcir']);
    };
    DiagnosticsImpl.prototype.safeSet = function (samplingRates, key, value) {
        if (typeof value !== 'number') {
            return;
        }
        if (value < 0) {
            samplingRates[key] = 0;
        }
        else if (value > exports.MAX_SAMPLING_RATE) {
            samplingRates[key] = exports.MAX_SAMPLING_RATE;
        }
        else {
            samplingRates[key] = value;
        }
    };
    DiagnosticsImpl.prototype.getShouldLogDiagnostics = function (type) {
        var rand = Math.random() * exports.MAX_SAMPLING_RATE;
        switch (type) {
            case 'id_list':
                return rand < this.samplingRates.idlist;
            case 'config_spec':
                return rand < this.samplingRates.dcs;
            case 'initialize':
                return rand < this.samplingRates.initialize;
            case 'api_call':
                return rand < this.samplingRates.api_call;
            case 'get_client_initialize_response':
                return rand < this.samplingRates.gcir;
            default:
                throw new core_1.ExhaustSwitchError(type);
        }
    };
    return DiagnosticsImpl;
}());
exports.DiagnosticsImpl = DiagnosticsImpl;
var Diagnostics = /** @class */ (function () {
    function Diagnostics() {
    }
    Diagnostics.initialize = function (args) {
        this.instance = new DiagnosticsImpl(args);
        this.mark = this.instance.mark;
    };
    Diagnostics.logDiagnostics = function (context, optionalArgs) {
        this.instance.logDiagnostics(context, optionalArgs);
    };
    Diagnostics.setContext = function (context) {
        this.instance.setContext(context);
    };
    Diagnostics.formatNetworkError = function (e) {
        if (!(e && typeof e === 'object')) {
            return;
        }
        return {
            code: safeGetField(e, 'code'),
            name: safeGetField(e, 'name'),
            message: safeGetField(e, 'message')
        };
    };
    Diagnostics.getMarkerCount = function (context) {
        return this.instance.getMarkerCount(context);
    };
    return Diagnostics;
}());
exports["default"] = Diagnostics;
function safeGetField(data, field) {
    if (field in data) {
        return data[field];
    }
    return undefined;
}

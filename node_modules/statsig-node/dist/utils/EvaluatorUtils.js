"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.arrayHasAllValues = exports.arrayHasValue = exports.arrayAny = exports.dateCompare = exports.stringCompare = exports.removeVersionExtension = exports.versionCompare = exports.versionCompareHelper = exports.numberCompare = exports.getParameterCaseInsensitive = exports.getFromEnvironment = exports.getFromUserAgent = exports.getFromUser = exports.computeUserHash = exports.getUnitID = void 0;
var Hashing_1 = require("./Hashing");
var parseUserAgent_1 = __importDefault(require("./parseUserAgent"));
function getUnitID(user, idType) {
    var _a;
    if (typeof idType === 'string' && idType.toLowerCase() !== 'userid') {
        var unitID = (_a = user === null || user === void 0 ? void 0 : user.customIDs) === null || _a === void 0 ? void 0 : _a[idType];
        if (unitID !== undefined) {
            return unitID;
        }
        return getParameterCaseInsensitive(user === null || user === void 0 ? void 0 : user.customIDs, idType);
    }
    return user === null || user === void 0 ? void 0 : user.userID;
}
exports.getUnitID = getUnitID;
var hashLookupTable = new Map();
function computeUserHash(userHash) {
    var existingHash = hashLookupTable.get(userHash);
    if (existingHash) {
        return existingHash;
    }
    var hash = (0, Hashing_1.sha256Hash)(userHash).getBigUint64(0, false);
    if (hashLookupTable.size > 100000) {
        hashLookupTable.clear();
    }
    hashLookupTable.set(userHash, hash);
    return hash;
}
exports.computeUserHash = computeUserHash;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function getFromUser(user, field) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    if (typeof user !== 'object') {
        return null;
    }
    var indexableUser = user;
    return ((_h = (_f = (_d = (_b = (_a = indexableUser[field]) !== null && _a !== void 0 ? _a : indexableUser[field.toLowerCase()]) !== null && _b !== void 0 ? _b : (_c = user === null || user === void 0 ? void 0 : user.custom) === null || _c === void 0 ? void 0 : _c[field]) !== null && _d !== void 0 ? _d : (_e = user === null || user === void 0 ? void 0 : user.custom) === null || _e === void 0 ? void 0 : _e[field.toLowerCase()]) !== null && _f !== void 0 ? _f : (_g = user === null || user === void 0 ? void 0 : user.privateAttributes) === null || _g === void 0 ? void 0 : _g[field]) !== null && _h !== void 0 ? _h : (_j = user === null || user === void 0 ? void 0 : user.privateAttributes) === null || _j === void 0 ? void 0 : _j[field.toLowerCase()]);
}
exports.getFromUser = getFromUser;
function getFromUserAgent(user, field) {
    var _a, _b, _c, _d;
    var ua = getFromUser(user, 'userAgent');
    if (ua == null) {
        return null;
    }
    if (typeof ua !== 'string' || ua.length > 1000) {
        return null;
    }
    var res = (0, parseUserAgent_1["default"])(ua);
    switch (field.toLowerCase()) {
        case 'os_name':
        case 'osname':
            return (_a = res.os.name) !== null && _a !== void 0 ? _a : null;
        case 'os_version':
        case 'osversion':
            return (_b = res.os.version) !== null && _b !== void 0 ? _b : null;
        case 'browser_name':
        case 'browsername':
            return (_c = res.browser.name) !== null && _c !== void 0 ? _c : null;
        case 'browser_version':
        case 'browserversion':
            return (_d = res.browser.version) !== null && _d !== void 0 ? _d : null;
        default:
            return null;
    }
}
exports.getFromUserAgent = getFromUserAgent;
function getFromEnvironment(user, field) {
    return getParameterCaseInsensitive(user === null || user === void 0 ? void 0 : user.statsigEnvironment, field);
}
exports.getFromEnvironment = getFromEnvironment;
function getParameterCaseInsensitive(object, key) {
    if (object == null) {
        return undefined;
    }
    var asLowercase = key.toLowerCase();
    var keyMatch = Object.keys(object).find(function (k) { return k.toLowerCase() === asLowercase; });
    if (keyMatch === undefined) {
        return undefined;
    }
    return object[keyMatch];
}
exports.getParameterCaseInsensitive = getParameterCaseInsensitive;
function numberCompare(fn) {
    return function (a, b) {
        if (a == null || b == null) {
            return false;
        }
        var numA = Number(a);
        var numB = Number(b);
        if (isNaN(numA) || isNaN(numB)) {
            return false;
        }
        return fn(numA, numB);
    };
}
exports.numberCompare = numberCompare;
function versionCompareHelper(fn) {
    return function (a, b) {
        var comparison = versionCompare(a, b);
        if (comparison == null) {
            return false;
        }
        return fn(comparison);
    };
}
exports.versionCompareHelper = versionCompareHelper;
// Compare two version strings without the extensions.
// returns -1, 0, or 1 if first is smaller than, equal to, or larger than second.
// returns false if any of the version strings is not valid.
function versionCompare(first, second) {
    if (typeof first !== 'string' || typeof second !== 'string') {
        return null;
    }
    var version1 = removeVersionExtension(first);
    var version2 = removeVersionExtension(second);
    if (version1.length === 0 || version2.length === 0) {
        return null;
    }
    var parts1 = version1.split('.');
    var parts2 = version2.split('.');
    for (var i = 0; i < Math.max(parts1.length, parts2.length); i++) {
        if (parts1[i] === undefined) {
            parts1[i] = '0';
        }
        if (parts2[i] === undefined) {
            parts2[i] = '0';
        }
        var n1 = Number(parts1[i]);
        var n2 = Number(parts2[i]);
        if (typeof n1 !== 'number' ||
            typeof n2 !== 'number' ||
            isNaN(n1) ||
            isNaN(n2)) {
            return null;
        }
        if (n1 < n2) {
            return -1;
        }
        else if (n1 > n2) {
            return 1;
        }
    }
    return 0;
}
exports.versionCompare = versionCompare;
function removeVersionExtension(version) {
    var hyphenIndex = version.indexOf('-');
    if (hyphenIndex >= 0) {
        return version.substr(0, hyphenIndex);
    }
    return version;
}
exports.removeVersionExtension = removeVersionExtension;
function stringCompare(ignoreCase, fn) {
    return function (a, b) {
        if (a == null || b == null) {
            return false;
        }
        return ignoreCase
            ? fn(String(a).toLowerCase(), String(b).toLowerCase())
            : fn(String(a), String(b));
    };
}
exports.stringCompare = stringCompare;
function dateCompare(fn) {
    return function (a, b) {
        if (a == null || b == null) {
            return false;
        }
        try {
            // Try to parse into date as a string first, if not, try unixtime
            var dateA = new Date(a);
            if (isNaN(dateA.getTime())) {
                dateA = new Date(Number(a));
            }
            var dateB = new Date(b);
            if (isNaN(dateB.getTime())) {
                dateB = new Date(Number(b));
            }
            return (!isNaN(dateA.getTime()) && !isNaN(dateB.getTime()) && fn(dateA, dateB));
        }
        catch (e) {
            // malformatted input, returning false
            return false;
        }
    };
}
exports.dateCompare = dateCompare;
/* eslint-disable @typescript-eslint/no-explicit-any */
function arrayAny(value, array, fn) {
    if (!Array.isArray(array)) {
        return false;
    }
    for (var i = 0; i < array.length; i++) {
        if (fn(value, array[i])) {
            return true;
        }
    }
    return false;
}
exports.arrayAny = arrayAny;
function arrayHasValue(value, target) {
    var valueSet = new Set(value);
    for (var i = 0; i < target.length; i++) {
        if (valueSet.has(target[i]) ||
            valueSet.has(parseInt(target[i]))) {
            return true;
        }
    }
    return false;
}
exports.arrayHasValue = arrayHasValue;
function arrayHasAllValues(value, target) {
    var valueSet = new Set(value);
    for (var i = 0; i < target.length; i++) {
        if (!valueSet.has(target[i]) &&
            !valueSet.has(parseInt(target[i]))) {
            return false;
        }
    }
    return true;
}
exports.arrayHasAllValues = arrayHasAllValues;
